#!/usr/bin/env python3

import gzip
import shutil

import os
import argparse
import progress.bar
import glob
import gpxpy
import gpxpy.gpx
import folium
import subprocess


def unzip(activities):
    """
    unzips all files in activities folder automatically
    """
    gzipfiles = glob.glob(activities + "/*.gz")
    bar = progress.bar.IncrementalBar('- Unpacking gzip files...', suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(gzipfiles))
    for f in gzipfiles:
        with gzip.open(f,'rb') as f_in:
            with open(f.replace('.gz', ''), 'wb') as f_out:
                shutil.copyfileobj(f_in,f_out)
                os.remove(f)
                bar.next()
    bar.finish()


def fit2gpx(activities):
    """
    Converts .fit files in activites folder to .gpx
    """

    if shutil.which('gpsbabel') is None:
        print("Warning: gpsbabel not found, not trying to convert any .fit file")
        return False

    fitfiles = glob.glob(activities + "/*.fit")
    bar = progress.bar.IncrementalBar('- Converting .fit files to .gpx...', suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(fitfiles))
    for f in fitfiles:
        # gpsbabel -i garmin_fit -f foo.fit -o gpx -F foo.gpx
        subprocess.run(["gpsbabel", "-i", "garmin_fit", "-f", f,  "-o", "gpx", "-F", f.replace('.fit', '.gpx')])
        os.remove(f)
        bar.next()
    bar.finish()
    return True

def lcount(keyword, fname, rate):
    with open(fname, 'r') as fin:
        return int(sum([1 for line in fin if keyword in line])/100 * rate)

def simplifygpx(activities, rate=30):
    gpxfiles = glob.glob(activities + "/*.gpx")
    gpxfiles = [item for item in gpxfiles if '-mini.gpx' not in item]
    print(gpxfiles)
    bar = progress.bar.IncrementalBar('- Simplifying gpx files by %s' % rate, suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(gpxfiles))
    for f in gpxfiles:
        # gpsbabel -rt -i gpx -f 4149187130.gpx -x simplify,count=50 -o gpx -F SIMPLIFIED-4149187130.gpx
        if not os.path.exists(f.replace('.gpx', '-mini.gpx')):
            count = lcount("trkpt", f, rate)
            subprocess.run(["gpsbabel", "-rt", "-i", "gpx", "-f", f, "-x", "simplify,count=%s" % count, "-o", "gpx", "-F", f.replace('.gpx', '-mini.gpx')])
            os.remove(f)
            bar.next()
    bar.finish()
    return True

def draw_file(osm_map, year, gpxfile):
    """
    Checks if gpx track is in time range (year or None)
    Iterates over all tracks, segments and points and adds
    points to maps object.
    :osm_map: map object
    :year: int or None
    :gpxfile: str
    returns: boolean
    """
    points = []
    xfile = open(gpxfile, 'r')
    gpx = gpxpy.parse(xfile)

    # check if file is from this year
    try:
        if gpx.tracks[0].segments[0].points[0].time.year != year and year is not None:
            return False
    except IndexError:
        print("Ignoring file {}. Problem finding tracks, segments or time XML element in the file".format(gpxfile))
        return False


    # loop over tracks
    for track in gpx.tracks:
        for segment in track.segments:
            for point in segment.points:
                points.append(tuple([point.latitude, point.longitude]))

    xfile.close()

    # add line to map
    folium.PolyLine(points, color="red", weight=2.5, opacity=0.5).add_to(osm_map)
    return True


def draw_map(osm_map, files, year):
    """
    Iterates over all files in list and hand over to
    draw track of file to map
    :osm_map: map object
    :files: list of files
    :year: int or None
    :returns: boolean
    """

    tracks_found = 0
    bar = progress.bar.IncrementalBar('- Placing dots on a map for %s...' % year, suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(files))
    for gpxfile in files:
        if draw_file(osm_map, year, gpxfile):
            tracks_found = tracks_found + 1
        bar.next()
    bar.finish()

    return tracks_found

def plot(years, activities, filemask="/*.gpx"):
    """
    Loops over years and draws map
    :years: list
    :returns: boolean
    """

    print("[+] Plotting")
    for year in years:
        osm_map = folium.Map(zoom_start=14)
        tracks_found = draw_map(osm_map, files=glob.glob(activities + filemask), year=year)
        osm_map.save("./index.{}.html".format(year))
        print("- Wrote {} with {} found tracks to ./index.{}.html".format(year, tracks_found, year))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Strava Activites Export Map Builder')
    parser.add_argument('--activities', '-a', type=str, required=True)
    parser.add_argument('--years', '-y', action='append', type=int, default=[None])
    parser.add_argument('--simplify', '-s', action='store_true')
    args = parser.parse_args()
    print("[+] Preparing exported files")
    unzip(args.activities)
    fit2gpx(args.activities)
    if args.simplify is True:
        simplified = simplifygpx(args.activities, rate=30)
        plot(years=args.years, activities=args.activities, filemask='/*-mini.gpx')
    else:
        plot(years=args.years, activities=args.activities)
