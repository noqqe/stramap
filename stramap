#!/usr/bin/env python3

import gzip
import shutil

import os
import argparse
import progress.bar
import glob
import gpxpy
import gpxpy.gpx
import folium
import subprocess


def unzip(files):
    """
    unzips all files in activities folder automatically
    """
    gzipfiles = glob.glob(os.path.dirname(files) + "/*.gz")
    bar = progress.bar.IncrementalBar('unpacking gzip files...', suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(gzipfiles))
    for f in gzipfiles:
        with gzip.open(f,'rb') as f_in:
            with open(f.replace('.gz', ''), 'wb') as f_out:
                shutil.copyfileobj(f_in,f_out)
                os.remove(f)
                bar.next()
    bar.finish()


def fit2gpx(files):
    """
    Converts .fit files in activites folder to .gpx
    """

    if shutil.which('gpsbabel') is None:
        print("Warning: gpsbabel not found, not trying to convert any .fit file")
        return False

    fitfiles = glob.glob(os.path.dirname(files) + "/*.fit")
    bar = progress.bar.IncrementalBar('Converting .fit files to .gpx...', suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(fitfiles))
    for f in fitfiles:
        # gpsbabel -i garmin_fit -f foo.fit -o gpx -F foo.gpx
        subprocess.run(["gpsbabel", "-i", "garmin_fit", "-f", f,  "-o", "gpx", "-F", f.replace('.gz', '')])
        os.remove(f)
        bar.next()
    bar.finish()
    return True


def draw_file(osm_map, year, gpxfile):
    """
    Checks if gpx track is in time range (year or None)
    Iterates over all tracks, segments and points and adds
    points to maps object.
    :osm_map: map object
    :year: int or None
    :gpxfile: str
    returns: boolean
    """
    points = []
    xfile = open(gpxfile, 'r')
    gpx = gpxpy.parse(xfile)

    # check if file is from this year
    try:
        if gpx.tracks[0].segments[0].points[0].time.year != year and year is not None:
            return False
    except IndexError:
        print(" Ignoring file {}. Problem finding tracks, segments or time XML element in the file".format(gpxfile))
        return False

    # loop over tracks
    for track in gpx.tracks:
        for segment in track.segments:
            for point in segment.points:
                points.append(tuple([point.latitude, point.longitude]))

    xfile.close()

    # add line to map
    folium.PolyLine(points, color="red", weight=2.5, opacity=0.5).add_to(osm_map)
    return True


def draw_map(osm_map, files, year):
    """
    Iterates over all files in list and hand over to
    draw track of file to map
    :osm_map: map object
    :files: list of files
    :year: int or None
    :returns: boolean
    """

    bar = progress.bar.IncrementalBar('Processing', suffix='%(remaining)s/%(max)s - %(percent).1f%% - %(eta)ds', max=len(files))
    for gpxfile in files:
        draw_file(osm_map, year, gpxfile)
        bar.next()

    bar.finish()

    return True

def plot(years, files):
    """
    Loops over years and draws map
    :years: list
    :returns: boolean
    """

    for year in years:
        print("[+] Plotting {}".format(year))
        osm_map = folium.Map(zoom_start=14)
        draw_map(osm_map, files=files, year=year)
        osm_map.save("./index.{}.html".format(year))
        print("[+] Wrote {} to ./index.{}.html".format(year, year))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Strava Activites Export Map Builder')
    parser.add_argument('--files', '-f', type=str)
    parser.add_argument('--years', '-y', action='append', type=str, default=None)
    args = parser.parse_args()
    unzip(args.files)
    fit2gpx(args.files)
    plot(args.years, glob.glob(args.files))
